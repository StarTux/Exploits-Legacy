package com.winthier.exploits;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class EntityDamage implements Exploit {
    static class EntityData {
        long accessed = 0L;
        double playerDamage = 0.0;
        void addPlayerDamage(double damage) {
            accessed = System.currentTimeMillis();
            playerDamage += damage;
        }
        boolean isOld() {
            return System.currentTimeMillis() - accessed > 1000L * 60L * 10L;
        }
    }
    private final Exploits exploits;
    private final Map<UUID, EntityData> entities = new HashMap<>();
    private final List<UUID> delayedDeaths = new ArrayList<>();
    private long ticks;

    EntityData getEntity(@NonNull UUID uuid) {
        EntityData result = entities.get(uuid);
        if (result == null) {
            result = new EntityData();
            entities.put(uuid, result);
        }
        return result;
    }

    public void onEntityDamageByPlayer(@NonNull UUID uuid, double damage) {
        getEntity(uuid).addPlayerDamage(damage);
    }

    public void onEntityDeath(@NonNull UUID uuid) {
        delayedDeaths.add(uuid);
    }

    public double getEntityDamageByPlayer(@NonNull UUID uuid) {
        EntityData entity = entities.get(uuid);
        if (entity == null) return 0.0;
        return entity.playerDamage;
    }

    public double getEntityDamageByPlayerPercentage(@NonNull UUID uuid, double maxHealth)
    {
        if (maxHealth <= 0.0) return 0.0;
        return Math.min(1.0, getEntityDamageByPlayer(uuid) / maxHealth);
    }

    void flush() {
        for (UUID uuid : delayedDeaths) entities.remove(uuid);
        delayedDeaths.clear();
    }

    @Override
    public void onTick() {
        flush();
        if (ticks++ % 20L == 0) {
            for (Iterator<EntityData> iter = entities.values().iterator(); iter.hasNext(); ) {
                EntityData e = iter.next();
                if (e.isOld()) iter.remove();
            }
        }
    }

    @Override
    public void onEnable() {
    }

    @Override
    public void onDisable() {
    }
}
