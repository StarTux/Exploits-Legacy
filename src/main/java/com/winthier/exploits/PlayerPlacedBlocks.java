package com.winthier.exploits;

import com.winthier.exploits.sql.PlayerPlacedBlocksTable;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class PlayerPlacedBlocks implements Exploit {
    private final Exploits exploits;
    private final List<WorldCoordinate> playerPlacedList = new ArrayList<>();
    private final List<WorldCoordinate> notPlayerPlacedList = new ArrayList<>();

    public boolean isPlayerPlaced(@NonNull WorldCoordinate coordinate) {
        PlayerPlacedBlocksTable row;
        row = PlayerPlacedBlocksTable.find(coordinate.toChunkCoordinate());
        if (row == null) return false;
        return row.isPlayerPlaced(coordinate.toCoordinateInChunk());
    }

    public void setPlayerPlaced(@NonNull WorldCoordinate coordinate, boolean playerPlaced) {
        // Setting is delayed until the next tick.
        if (playerPlaced) {
            playerPlacedList.add(coordinate);
        } else {
            notPlayerPlacedList.add(coordinate);
        }
    }

    public boolean isPlayerPlaced(@NonNull String world, int x, int y, int z) { 
        return isPlayerPlaced(WorldCoordinate.of(world, x, y, z));
    }
    
    public void setPlayerPlaced(@NonNull String world, int x, int y, int z, boolean playerPlaced) {
        setPlayerPlaced(WorldCoordinate.of(world, x, y, z), playerPlaced);
    }

    public void highlightPlayerPlacedBlocks(@NonNull UUID player) {
        final int RADIUS = 32;
        WorldCoordinate center = exploits.getPlayerLocation(player);
        if (center == null) return;
        int blockCount = 0;
        for (int dy = -RADIUS; dy <= RADIUS; ++dy) {
            for (int dz = -RADIUS; dz <= RADIUS; ++dz) {
                for (int dx = -RADIUS; dx <= RADIUS; ++dx) {
                    WorldCoordinate block = center.relative(dx, dy, dz);
                    if (isPlayerPlaced(block)) {
                        blockCount += 1;
                        exploits.highlightBlock(player, block);
                    }
                }
            }
        }
        exploits.send(player, "&eHighlighted %d player placed blocks within radius %d", blockCount, RADIUS);
    }


    void flush() {
        for (WorldCoordinate coordinate : notPlayerPlacedList) {
            PlayerPlacedBlocksTable row;
            row = PlayerPlacedBlocksTable.find(coordinate.toChunkCoordinate());
            if (row == null) continue;
            row.setPlayerPlaced(coordinate.toCoordinateInChunk(), false);
        }
        for (WorldCoordinate coordinate : playerPlacedList) {
            PlayerPlacedBlocksTable row;
            row = PlayerPlacedBlocksTable.findOrCreate(coordinate.toChunkCoordinate());
            if (row == null) continue;
            row.setPlayerPlaced(coordinate.toCoordinateInChunk(), true);
        }
        playerPlacedList.clear();
        notPlayerPlacedList.clear();
    }

    @Override
    public void onEnable() {
    }

    @Override
    public void onDisable() {
        flush();
        PlayerPlacedBlocksTable.saveAll();
    }

    @Override
    public void onTick() {
        flush();
        if (exploits.getTicksLived() % (20L * 60L) == 0L) PlayerPlacedBlocksTable.saveAll();
    }
}
