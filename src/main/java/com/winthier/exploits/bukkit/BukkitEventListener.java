package com.winthier.exploits.bukkit;

import lombok.RequiredArgsConstructor;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.block.BlockState;
import org.bukkit.entity.Entity;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.entity.Projectile;
import org.bukkit.event.Event;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockBurnEvent;
import org.bukkit.event.block.BlockFadeEvent;
import org.bukkit.event.block.BlockGrowEvent;
import org.bukkit.event.block.BlockPistonExtendEvent;
import org.bukkit.event.block.BlockPistonRetractEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityChangeBlockEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.event.entity.EntityExplodeEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.event.world.StructureGrowEvent;

@RequiredArgsConstructor
public class BukkitEventListener implements Listener {
    private final BukkitExploitsPlugin plugin;

    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onBlockPlace(BlockPlaceEvent event) {
        plugin.exploits.setPlayerPlaced(event.getBlock(), true);
        plugin.exploits.onBlockPlace(event.getPlayer(), event.getBlock());
        if (plugin.exploits.hasDebugMode(event.getPlayer())) {
            plugin.exploits.send(event.getPlayer(), "Player Placed: %s", plugin.exploits.isPlayerPlaced(event.getBlock()));
        }
    }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onBlockBreak(BlockBreakEvent event) {
        plugin.exploits.setPlayerPlaced(event.getBlock(), false);
        plugin.exploits.onBlockBreak(event.getPlayer(), event.getBlock());
        if (plugin.exploits.hasDebugMode(event.getPlayer())) {
            plugin.exploits.send(event.getPlayer(), "Player Placed: %s", plugin.exploits.isPlayerPlaced(event.getBlock()));
        }
    }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onBlockGrow(BlockGrowEvent event) {
        plugin.exploits.setPlayerPlaced(event.getBlock(), false);
    }

    // @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    // public void onBlockFade(BlockFadeEvent event) {
    //     plugin.exploits.setPlayerPlaced(event.getBlock(), false);
    // }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onBlockBurn(BlockBurnEvent event) {
        plugin.exploits.setPlayerPlaced(event.getBlock(), false);
    }
    
    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onStructureGrow(StructureGrowEvent event) {
        for (BlockState block : event.getBlocks()) {
            plugin.exploits.setPlayerPlaced(block.getBlock(), false);
        }
    }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onBlockPistonExtend(BlockPistonExtendEvent event) {
        BlockFace direction = event.getDirection();
        for (Block block : event.getBlocks()) {
            plugin.exploits.setPlayerPlaced(block.getRelative(direction), true);
        }
    }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onBlockPistonRetract(BlockPistonRetractEvent event) {
        BlockFace direction = event.getDirection();
        for (Block block : event.getBlocks()) {
            plugin.exploits.setPlayerPlaced(block.getRelative(direction), true);
        }
    }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onEntityExplode(EntityExplodeEvent event) {
        for (Block block : event.blockList()) {
            plugin.exploits.setPlayerPlaced(block, false);
        }
    }

    // @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    // public void onEntityChangeBlock(EntityChangeBlockEvent event) {
    //     plugin.exploits.setPlayerPlaced(event.getBlock(), false);
    // }

    private Player getPlayerDamager(Entity damager) {
        if (damager instanceof Player) {
            return (Player)damager;
        } else if (damager instanceof Projectile) {
            Projectile projectile = (Projectile)damager;
            if (!(projectile.getShooter() instanceof Player)) return null;
            return (Player)projectile.getShooter();
        }
        return null;
    }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onEntityDeath(EntityDeathEvent event) {
        LivingEntity entity = event.getEntity();
        if (entity instanceof Player) return;
        // Notify Entity Damage
        plugin.exploits.getEntityDamage().onEntityDeath(entity.getUniqueId());
        // Notify Player Actions
        Player player = entity.getKiller();
        if (player == null) return;
        plugin.exploits.onEntityKill(player, entity);
    }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onEntityDamageByEntity(EntityDamageByEntityEvent event)
    {
        if (!(event.getEntity() instanceof LivingEntity)) return;
        LivingEntity entity = (LivingEntity)event.getEntity();
        if (entity instanceof Player) return;
        Player player = getPlayerDamager(event.getDamager());
        if (player == null) return;
        // Notify Entity Damage
        plugin.exploits.getEntityDamage().onEntityDamageByPlayer(entity.getUniqueId(), event.getFinalDamage());
        if (plugin.exploits.hasDebugMode(player)) {
            plugin.exploits.send(player, "Player Damage: %.0f%%", 100.0 * plugin.exploits.getEntityDamageByPlayerPercentage(entity));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerQuit(PlayerQuitEvent event)
    {
        plugin.exploits.getPlayerActions().onPlayerQuit(event.getPlayer().getUniqueId());
    }
}
