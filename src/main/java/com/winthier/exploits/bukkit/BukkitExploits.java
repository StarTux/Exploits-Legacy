package com.winthier.exploits.bukkit;

import com.avaje.ebean.EbeanServer;
import com.winthier.exploits.Exploits;
import com.winthier.exploits.PlayerAction;
import com.winthier.exploits.WorldCoordinate;
import java.util.UUID;
import lombok.Getter;
import lombok.NonNull;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Horse;
import org.bukkit.entity.Ocelot;
import org.bukkit.entity.Player;
import org.bukkit.entity.Rabbit;
import org.bukkit.entity.Skeleton;
import org.bukkit.entity.Villager;
import org.bukkit.scheduler.BukkitRunnable;

public class BukkitExploits extends Exploits {
    private final BukkitExploitsPlugin plugin;
    @Getter
    private static BukkitExploits instance;
    private final BukkitRunnable tickTask = new BukkitRunnable() {@Override public void run() {onTick();}};

    BukkitExploits(BukkitExploitsPlugin plugin) {
        super();
        this.plugin = plugin;
        instance = this;
    }

    @Override
    public EbeanServer getDatabase() {
        return plugin.getDatabase();
    }

    @Override
    public String format(String msg, Object... args) {
        msg = ChatColor.translateAlternateColorCodes('&', msg);
        if (args.length > 0) msg = String.format(msg, args);
        return msg;
    }

    @Override
    public boolean send(UUID uuid, String msg, Object... args) {
        CommandSender sender;
        if (uuid == null) {
            sender = Bukkit.getServer().getConsoleSender();
        } else {
            sender = Bukkit.getPlayer(uuid);
        }
        if (sender == null) return false;
        sender.sendMessage(format(msg, args));
        return true;
    }

    @Override
    @SuppressWarnings("deprecation")
    public boolean highlightBlock(@NonNull UUID sender, @NonNull WorldCoordinate coordinate) {
        Player player = Bukkit.getServer().getPlayer(sender);
        if (player == null) return false;
        Block block = makeBlock(coordinate);
        Location location = block.getLocation();
        int mat = Material.GLOWSTONE.getId();
        if (block.getType() == Material.GLOWSTONE) {
            mat = Material.OBSIDIAN.getId();
        }
        player.sendBlockChange(location, mat, (byte)0);
        return true;
    }

    @Override
    public WorldCoordinate getPlayerLocation(@NonNull UUID uuid) {
        Player player = Bukkit.getServer().getPlayer(uuid);
        if (player == null) return null;
        return makeWorldCoordinate(player.getLocation());
    }
    
    void enable() {
        tickTask.runTaskTimer(plugin, 1L, 1L);
    }

    void disable() {
        tickTask.cancel();
        onDisable();
    }

    void onBlockPlace(Player player, Block block) {
        UUID uuid = player.getUniqueId();
        WorldCoordinate location = makeWorldCoordinate(block);
        getPlayerActions().onBlockPlace(uuid, location);
    }

    void onBlockBreak(Player player, Block block) {
        UUID uuid = player.getUniqueId();
        WorldCoordinate location = makeWorldCoordinate(block);
        getPlayerActions().onBlockBreak(uuid, location);
    }

    void onEntityKill(Player player, Entity entity) {
        UUID uuid = player.getUniqueId();
        WorldCoordinate location = makeWorldCoordinate(entity.getLocation());
        EntityType entityType = entity.getType();
        Enum entitySubtype = null;
        switch (entityType) {
        case HORSE:
            entitySubtype = ((Horse)entity).getVariant(); break;
        case OCELOT:
            entitySubtype = ((Ocelot)entity).getCatType(); break;
        case RABBIT:
            entitySubtype = ((Rabbit)entity).getRabbitType(); break;
        case SKELETON:
            entitySubtype = ((Skeleton)entity).getSkeletonType(); break;
        case VILLAGER:
            entitySubtype = ((Villager)entity).getProfession(); break;
        }
        // TODO
    }

    public WorldCoordinate makeWorldCoordinate(@NonNull Block block) {
        return WorldCoordinate.of(block.getWorld().getName(), block.getX(), block.getY(), block.getZ());
    }

    public WorldCoordinate makeWorldCoordinate(@NonNull Location location) {
        return WorldCoordinate.of(location.getWorld().getName(), location.getBlockX(), location.getBlockY(), location.getBlockZ());
    }

    public Block makeBlock(@NonNull WorldCoordinate coordinate) {
        World world = Bukkit.getServer().getWorld(coordinate.getWorld());
        if (world == null) throw new NullPointerException("World not found: " + coordinate.getWorld());
        return world.getBlockAt(coordinate.getX(), coordinate.getY(), coordinate.getZ());
    }

    public Location makeLocation(@NonNull WorldCoordinate coordinate) {
        World world = Bukkit.getServer().getWorld(coordinate.getWorld());
        if (world == null) throw new NullPointerException("World not found: " + coordinate.getWorld());
        return new Location(world, coordinate.getX(), coordinate.getY(), coordinate.getZ());
    }
    
    public boolean isPlayerPlaced(Block block) {
        return getPlayerPlacedBlocks().isPlayerPlaced(makeWorldCoordinate(block));
    }

    public void setPlayerPlaced(Block block, boolean playerPlaced) {
        getPlayerPlacedBlocks().setPlayerPlaced(makeWorldCoordinate(block), playerPlaced);
    }

    public boolean isPlayerPlaced(Location location) {
        return getPlayerPlacedBlocks().isPlayerPlaced(makeWorldCoordinate(location));
    }

    public void setPlayerPlaced(Location location, boolean playerPlaced) {
        getPlayerPlacedBlocks().setPlayerPlaced(makeWorldCoordinate(location), playerPlaced);
    }
}
