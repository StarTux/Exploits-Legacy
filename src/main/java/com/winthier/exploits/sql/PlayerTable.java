package com.winthier.exploits.sql;

import com.avaje.ebean.validation.NotNull;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;

@Entity
@Table(name = "players",
       uniqueConstraints = @UniqueConstraint(columnNames = {"uuid"}))
@Getter
@Setter
public class PlayerTable {
    final static Map<UUID, PlayerTable> cache = new HashMap<>();
    
    @Id
    private Integer id;

    @NotNull
    private UUID uuid;

    static PlayerTable find(@NonNull UUID uuid) {
        if (cache.containsKey(uuid)) return cache.get(uuid);
        PlayerTable result = DB.get().find(PlayerTable.class).where().eq("uuid", uuid).findUnique();
        cache.put(uuid, result); // May put null
        return result;
    }

    static PlayerTable findOrCreate(@NonNull UUID uuid) {
        PlayerTable result = find(uuid);
        if (result == null) {
            result = new PlayerTable();
            result.setUuid(uuid);
            DB.get().save(result);
            cache.put(uuid, result);
        }
        return result;
    }
}
