package com.winthier.exploits.sql;

import com.avaje.ebean.validation.NotNull;
import com.winthier.exploits.PlayerAction;
import com.winthier.exploits.WorldCoordinate;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;
import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;

@Entity
@Table(name="player_locations",
       uniqueConstraints=@UniqueConstraint(columnNames={"player_id", "action_id", "player_index"}))
@Getter
@Setter
public class PlayerLocationTable {
    @Id
    private Integer id;

    @ManyToOne(optional=false)
    private PlayerTable player;

    @NotNull
    private Integer actionId;

    @NotNull
    private Integer playerIndex;

    @ManyToOne(optional=false)
    private WorldTable world;

    @NotNull
    private Integer x;

    @NotNull
    private Integer y;

    @NotNull
    private Integer z;

    @NotNull
    private Date updated;

    @Version
    private Integer version;

    static PlayerLocationTable find(@NonNull PlayerTable player, @NonNull PlayerAction action, int playerIndex) {
        return DB.unique(DB.get().find(PlayerLocationTable.class).where().eq("player", player).eq("action_id", action.id).eq("player_index", playerIndex).findList());
    }

    static PlayerLocationTable find(@NonNull UUID playerId, @NonNull PlayerAction action, int playerIndex) {
        PlayerTable player = PlayerTable.find(playerId);
        if (player == null) return null;
        return find(player, action, playerIndex);
    }

    public static List<PlayerLocationTable> findAll(@NonNull UUID playerId, @NonNull PlayerAction action) {
        PlayerTable player = PlayerTable.find(playerId);
        if (player == null) return Collections.emptyList();
        return DB.get().find(PlayerLocationTable.class).where().eq("player", player).eq("action_id", action.id).findList();
    }
    
    static PlayerLocationTable findOrCreate(@NonNull PlayerTable player, @NonNull PlayerAction action, int playerIndex, @NonNull WorldCoordinate location) {
        PlayerLocationTable result = find(player, action, playerIndex);
        if (result == null) {
            result = new PlayerLocationTable();
            result.setPlayer(player);
            result.setActionId(action.id);
            result.setPlayerIndex(playerIndex);
            result.setLocation(location);
            result.save();
        } else {
            result.setLocation(location);
        }
        return result;
    }
    
    public static PlayerLocationTable findOrCreate(@NonNull UUID playerId, @NonNull PlayerAction action, int playerIndex, @NonNull WorldCoordinate location) {
        return findOrCreate(PlayerTable.findOrCreate(playerId), action, playerIndex, location);
    }

    public void setLocation(@NonNull WorldCoordinate location) {
        setWorld(WorldTable.findOrCreate(location.getWorld()));
        setX(location.getX());
        setY(location.getY());
        setZ(location.getZ());
        setUpdated(new Date());
    }

    void save() {
        DB.get().save(this);
    }
}
