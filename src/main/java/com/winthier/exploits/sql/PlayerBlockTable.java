package com.winthier.exploits.sql;

import com.avaje.ebean.validation.NotNull;
import com.winthier.exploits.PlayerAction;
import com.winthier.exploits.WorldCoordinate;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;
import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;

@Entity
@Table(name="player_blocks",
       uniqueConstraints=@UniqueConstraint(columnNames={"player_id", "action_id", "index"}))
@Getter
@Setter
public class PlayerBlockTable {
    @Id private Integer id;
    @ManyToOne(optional=false) private PlayerTable player;
    @NotNull private Integer actionId;
    @NotNull private Integer index;
    @NotNull private Integer blockID;
    @NotNull private Integer blockData;
    @NotNull private Date updated;
    @Version private Integer version;

    static PlayerBlockTable find(@NonNull PlayerTable player, @NonNull PlayerAction action, int index) {
        return DB.unique(DB.get().find(PlayerBlockTable.class).where().eq("player", player).eq("action_id", action.id).eq("index", index).findList());
    }

    static PlayerBlockTable find(@NonNull UUID playerId, @NonNull PlayerAction action, int index) {
        PlayerTable player = PlayerTable.find(playerId);
        if (player == null) return null;
        return find(player, action, index);
    }

    public static List<PlayerBlockTable> findAll(@NonNull UUID playerId, @NonNull PlayerAction action) {
        PlayerTable player = PlayerTable.find(playerId);
        if (player == null) return Collections.emptyList();
        return DB.get().find(PlayerBlockTable.class).where().eq("player", player).eq("action_id", action.id).findList();
    }

    static PlayerBlockTable findOrCreate(@NonNull PlayerTable player, @NonNull PlayerAction action, int index, int blockID, int blockData)
    {
        PlayerBlockTable result = find(player, action, index);
        if (result == null) {
            result = new PlayerBlockTable();
            result.setPlayer(player);
            result.setActionId(action.id);
            result.setIndex(index);
            result.setBlock(blockID, blockData);
            result.save();
        } else {
            result.setBlock(blockID, blockData);
        }
        return result;
    }

    public static PlayerBlockTable findOrCreate(@NonNull UUID playerId, @NonNull PlayerAction action, int index, int blockID, int blockData)
    {
        return findOrCreate(PlayerTable.findOrCreate(playerId), action, index, blockID, blockData);
    }

    public void setBlock(int blockID, int blockData)
    {
        setBlockID(blockID);
        setBlockData(blockData);
        setUpdated(new Date());
    }

    void save() {
        DB.get().save(this);
    }
}
