package com.winthier.exploits;

import com.avaje.ebean.EbeanServer;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import lombok.Getter;

/**
 * Singleton class. The calling framework needs to create a
 * subclass of this, overriding all abstract methods, and create
 * one instance.
 */
@Getter
public abstract class Exploits {
    @Getter private static Exploits instance;
    @Getter private final ExploitsCommand exploitsCommand = new ExploitsCommand(this);
    @Getter private final PlayerPlacedBlocks playerPlacedBlocks = new PlayerPlacedBlocks(this);
    @Getter private final PlayerActions playerActions = new PlayerActions(this);
    @Getter private final EntityDamage entityDamage = new EntityDamage(this);
    private List<Exploit> exploits;

    protected Exploits() {
        instance = this;
        exploits = Arrays.asList(playerPlacedBlocks, playerActions, entityDamage);
    }

    public abstract EbeanServer getDatabase();
    public abstract String format(String msg, Object... args);
    public abstract boolean send(UUID sender, String msg, Object... args);
    public abstract boolean highlightBlock(UUID sender, WorldCoordinate coordinate);
    public abstract WorldCoordinate getPlayerLocation(UUID player);
    @Getter
    private long ticksLived;

    /**
     * The calling framework needs to call this method once per
     * tick.
     * It will take care of delayed setting player placed blocks,
     * as well as saving.
     */
    protected final void onTick() {
        ticksLived += 1;
        for (Exploit exploit : exploits) exploit.onTick();
    }

    protected final void onEnable() {
        for (Exploit exploit : exploits) exploit.onEnable();
    }

    protected final void onDisable() {
        for (Exploit exploit : exploits) exploit.onDisable();
    }
}
